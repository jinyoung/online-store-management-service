Let's start by creating the `pom.xml` file which will define the Maven project, its dependencies, and properties.

pom.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>order-inventory-system</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.0</version>
    </parent>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web, includes RESTful application support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA, includes spring-data-rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Cloud Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>3.1.3</version>
        </dependency>

        <!-- Spring Cloud Stream Binder for Kafka -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>

        <!-- Spring Boot Starter Test for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

Next, we will create the directory structure and the core classes, functions, and methods necessary for the implementation. We will start with the entry point of the application.

src/main/java/com/example/orderinventorysystem/OrderInventorySystemApplication.java
```java
package com.example.orderinventorysystem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OrderInventorySystemApplication {

    public static void main(String[] args) {
        SpringApplication.run(OrderInventorySystemApplication.class, args);
    }
}
```

Now, let's define the domain models, repositories, services, and controllers for the aggregates defined in the Event Storming Model. We will start with the `Order` aggregate.

src/main/java/com/example/orderinventorysystem/domain/Order.java
```java
package com.example.orderinventorysystem.domain;

import jakarta.persistence.*;
import lombok.*;
import java.util.UUID;

@Entity
@Table(name = "orders")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Order {
    @Id
    @GeneratedValue
    private UUID orderId;

    @Column(nullable = false)
    private UUID productId;

    @Column(nullable = false)
    private Integer quantity;

    @Column(nullable = false)
    private String status;

    @Enumerated(EnumType.STRING)
    private StatusType statusType;
}
```

src/main/java/com/example/orderinventorysystem/domain/StatusType.java
```java
package com.example.orderinventorysystem.domain;

public enum StatusType {
    PENDING,
    PROCESSED,
    DELIVERED
}
```

src/main/java/com/example/orderinventorysystem/repository/OrderRepository.java
```java
package com.example.orderinventorysystem.repository;

import com.example.orderinventorysystem.domain.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.UUID;

@Repository
public interface OrderRepository extends JpaRepository<Order, UUID> {
}
```

src/main/java/com/example/orderinventorysystem/service/OrderService.java
```java
package com.example.orderinventorysystem.service;

import com.example.orderinventorysystem.domain.Order;
import com.example.orderinventorysystem.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.UUID;

@Service
public class OrderService {

    private final OrderRepository orderRepository;

    @Autowired
    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    public Order placeOrder(UUID productId, Integer quantity) {
        Order order = Order.builder()
                .productId(productId)
                .quantity(quantity)
                .status("PENDING")
                .statusType(StatusType.PENDING)
                .build();
        return orderRepository.save(order);
    }

    public Order processOrder(UUID orderId) {
        Order order = orderRepository.findById(orderId).orElseThrow();
        order.setStatus("PROCESSED");
        order.setStatusType(StatusType.PROCESSED);
        return orderRepository.save(order);
    }

    public Order updateDeliveryStatus(UUID orderId, String status) {
        Order order = orderRepository.findById(orderId).orElseThrow();
        order.setStatus(status);
        order.setStatusType(StatusType.valueOf(status.toUpperCase()));
        return orderRepository.save(order);
    }
}
```

src/main/java/com/example/orderinventorysystem/controller/OrderController.java
```java
package com.example.orderinventorysystem.controller;

import com.example.orderinventorysystem.domain.Order;
import com.example.orderinventorysystem.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/orders")
public class OrderController {

    private final OrderService orderService;

    @Autowired
    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }

    @PostMapping
    public ResponseEntity<Order> placeOrder(@RequestParam UUID productId, @RequestParam Integer quantity) {
        Order order = orderService.placeOrder(productId, quantity);
        return ResponseEntity.ok(order);
    }

    @PutMapping("/{orderId}/process")
    public ResponseEntity<Order> processOrder(@PathVariable UUID orderId) {
        Order order = orderService.processOrder(orderId);
        return ResponseEntity.ok(order);
    }

    @PutMapping("/{orderId}/delivery-status")
    public ResponseEntity<Order> updateDeliveryStatus(@PathVariable UUID orderId, @RequestParam String status) {
        Order order = orderService.updateDeliveryStatus(orderId, status);
        return ResponseEntity.ok(order);
    }
}
```

Next, we will define the `Inventory` aggregate.

src/main/java/com/example/orderinventorysystem/domain/Inventory.java
```java
package com.example.orderinventorysystem.domain;

import jakarta.persistence.*;
import lombok.*;
import java.util.UUID;

@Entity
@Table(name = "inventory")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Inventory {
    @Id
    @GeneratedValue
    private UUID productId;

    @Column(nullable = false)
    private Integer quantity;
}
```

src/main/java/com/example/orderinventorysystem/repository/InventoryRepository.java
```java
package com.example.orderinventorysystem.repository;

import com.example.orderinventorysystem.domain.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.UUID;

@Repository
public interface InventoryRepository extends JpaRepository<Inventory, UUID> {
}
```

src/main/java/com/example/orderinventorysystem/service/InventoryService.java
```java
package com.example.orderinventorysystem.service;

import com.example.orderinventorysystem.domain.Inventory;
import com.example.orderinventorysystem.repository.InventoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.UUID;

@Service
public class InventoryService {

    private final InventoryRepository inventoryRepository;

    @Autowired
    public InventoryService(InventoryRepository inventoryRepository) {
        this.inventoryRepository = inventoryRepository;
    }

    public Inventory manageInventory(UUID productId, Integer quantity) {
        Inventory inventory = inventoryRepository.findById(productId)
                .orElse(Inventory.builder().productId(productId).quantity(0).build());
        inventory.setQuantity(inventory.getQuantity() + quantity);
        return inventoryRepository.save(inventory);
    }
}
```

src/main/java/com/example/orderinventorysystem/controller/InventoryController.java
```java
package com.example.orderinventorysystem.controller;

import com.example.orderinventorysystem.domain.Inventory;
import com.example.orderinventorysystem.service.InventoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/inventory")
public class InventoryController {

    private final InventoryService inventoryService;

    @Autowired
    public InventoryController(InventoryService inventoryService) {
        this.inventoryService = inventoryService;
    }

    @PostMapping
    public ResponseEntity<Inventory> manageInventory(@RequestParam UUID productId, @RequestParam Integer quantity) {
        Inventory inventory = inventoryService.manageInventory(productId, quantity);
        return ResponseEntity.ok(inventory);
    }
}
```

Now, let's create the Kafka configuration and event publishing services.

src/main/java/com/example/orderinventorysystem/config/KafkaConfig.java
```java
package com.example.orderinventorysystem.config;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBinding(Source.class)
public class KafkaConfig {
}
```

src/main/java/com/example/orderinventorysystem/service/EventPublisherService.java
```java
package com.example.orderinventorysystem.service;

import com.example.orderinventorysystem.domain.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

@Service
public class EventPublisherService {

    private final Source source;

    @Autowired
    public EventPublisherService(Source source) {
        this.source = source;
    }

    public void publishOrderPlacedEvent(Order order) {
        source.output().send(MessageBuilder.withPayload(order).build());
    }

    // Additional methods to publish other events can be added here
}
```

Finally, let's create the test cases for our services.

src/test/java/com/example/orderinventorysystem/service/OrderServiceTest.java
```java
package com.example.orderinventorysystem.service;

import com.example.orderinventorysystem.domain.Order;
import com.example.orderinventorysystem.repository.OrderRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.UUID;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class OrderServiceTest {

    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void placeOrder() {
        UUID productId = UUID.randomUUID();
        Integer quantity = 10;
        Order order = new Order(null, productId, quantity, "PENDING", StatusType.PENDING);
        when(orderRepository.save(any(Order.class))).thenReturn(order);

        Order createdOrder = orderService.placeOrder(productId, quantity);

        assertNotNull(createdOrder);
        assertEquals(productId, createdOrder.getProductId());
        assertEquals(quantity, createdOrder.getQuantity());
        assertEquals("PENDING", createdOrder.getStatus());
    }

    // Additional tests for processOrder and updateDeliveryStatus can be added here
}
```

This concludes a fully working implementation.